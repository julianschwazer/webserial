{"version":3,"file":"simple-web-serial.min.js","sources":["../src/SimpleSerial.js"],"sourcesContent":["'use strict';\r\n\r\nconst DEFAULT_BAUDRATE = 57600;\r\nconst NEW_LINE = '\\n';\r\n\r\nclass LineBreakTransformer {\r\n    constructor() {\r\n        // A container for holding stream data until a new line.\r\n        this.chunks = \"\";\r\n    }\r\n\r\n    transform(chunk, controller) {\r\n        // Append new chunks to existing chunks.\r\n        this.chunks += chunk;\r\n        // For each line breaks in chunks, send the parsed lines out.\r\n        const lines = this.chunks.split(\"\\r\\n\");\r\n        this.chunks = lines.pop();\r\n        lines.forEach((line) => controller.enqueue(line));\r\n    }\r\n\r\n    flush(controller) {\r\n        // When the stream is closed, flush any remaining chunks out.\r\n        controller.enqueue(this.chunks);\r\n    }\r\n}\r\n\r\nfunction parseAsNumber(value) {\r\n    if (typeof value == \"number\") {\r\n        return value;\r\n    } else if (typeof value == \"string\" && !isNaN(value) && !isNaN(parseFloat(value))) {\r\n        return parseFloat(value);\r\n    } else if (typeof value == \"object\") {\r\n        // Iterate over keys, return parsed values\r\n        let obj = {};\r\n        Object.keys(value).forEach(key => {\r\n            obj[key] = parseAsNumber(value[key]);\r\n        })\r\n        return obj;\r\n    } else {\r\n        return value;\r\n    }\r\n}\r\n\r\n// TODO: Change requestAccessOnPageLoad back to false per default, it's true for debugging purposes\r\nconst defaultConstructorObject = {\r\n    baudRate: DEFAULT_BAUDRATE,\r\n    requestButton: null,\r\n    requestAccessOnPageLoad: true,\r\n    accessText: \"To access serial devices, user interaction is required. Please press this button to select the port you want to connect to.\",\r\n    accessButtonLabel: \"Connect to Serial Port\",\r\n    styleDomElements: true,\r\n    transformer: new LineBreakTransformer(),\r\n    logIncomingSerialData: false,\r\n    logOutgoingSerialData: false,\r\n    parseStringsAsNumbers: true,\r\n    // TODO mention this new property in documentation\r\n    warnAboutUnregisteredEvents: true,\r\n    filters: []\r\n}\r\n\r\nclass SimpleSerial {\r\n    configuration;\r\n    port;\r\n    writer;\r\n    modal;\r\n    _listeners = {};\r\n    _this = this;\r\n\r\n    constructor(args) {\r\n        if (!navigator.serial) {\r\n            throw new Error(\"The Serial API not supported in your browser. Make sure you've enabled flags if necessary!\");\r\n        }\r\n\r\n        if (typeof args === \"number\") {\r\n            args = {\r\n                ...defaultConstructorObject,\r\n                baudRate: args\r\n            }\r\n        } else if (typeof args === \"undefined\") {\r\n            args = defaultConstructorObject;\r\n        } else if (typeof args === 'object') {\r\n            // TODO check for valid configuration object (transformer, HTML Element, ...)\r\n\r\n            // constructor object, override defaults\r\n            args = {\r\n                ...defaultConstructorObject,\r\n                ...args\r\n            }\r\n        }\r\n\r\n        if (args.requestButton != null) {\r\n            args = {\r\n                requestAccessOnPageLoad: false,\r\n                ...args\r\n            }\r\n        }\r\n\r\n        this.configuration = args;\r\n        console.log(\"SimpleSerial instance created\")\r\n\r\n        // If a button or an id was supplied, attach an event listener to it.\r\n        if (this.configuration.requestButton) {\r\n            this.requestSerialAccessOnClick(this.configuration.requestButton);\r\n        }\r\n\r\n        // If the library should handle requesting access to the serial device, create a modal on page load.\r\n        if (this.configuration.requestAccessOnPageLoad) {\r\n            window.addEventListener(\"load\", this.createModal.bind(this));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    requestSerialAccessOnClick(element) {\r\n        if (typeof element === \"string\") {\r\n            // Search for HTML Element with this id\r\n            const el = document.getElementById(element)\r\n            if (!el) throw \"Could not find element with ID '\" + element + \"'.\"\r\n            element = el;\r\n        }\r\n        element.addEventListener(\"click\", this.connect.bind(this))\r\n    }\r\n\r\n    createModal() {\r\n        this.modal = document.createElement(\"div\");\r\n        this.configuration.styleDomElements ? this.modal.setAttribute(\"style\", \"position: fixed; left: 0; top: 0; width: 100%; height: 100%; left: 0; top: 0; z-index: 10000\") : null;\r\n\r\n        const modalOverlay = document.createElement(\"div\");\r\n        this.configuration.styleDomElements ? modalOverlay.setAttribute(\"style\", \"background-color: rgba(0,0,0,.3); position: absolute; left: 0; top: 0; width: 100%; height: 100%; left: 0; top: 0; cursor: pointer\") : null;\r\n        modalOverlay.classList.add(\"SimpleSerial-modal-overlay\");\r\n\r\n        const modalContainer = document.createElement(\"div\");\r\n        this.configuration.styleDomElements ? modalContainer.setAttribute(\"style\", \"position: absolute; width: 100%; height: auto; padding: 4rem; box-sizing: border-box; \") : null;\r\n        modalContainer.classList.add(\"SimpleSerial-modal-container\");\r\n\r\n        const modalInner = document.createElement(\"div\");\r\n        this.configuration.styleDomElements ? modalInner.setAttribute(\"style\", \"background-color: #fff; border-radius: 4px; padding: 1rem; box-shadow: 0px 2px 11px 4px rgba(0,0,0, .09);\") : null;\r\n        modalInner.classList.add(\"SimpleSerial-modal-inner\");\r\n\r\n        const modalInnerText = document.createElement(\"p\");\r\n        this.configuration.styleDomElements ? modalInnerText.setAttribute(\"style\", \"color: #000\") : null;\r\n        modalInnerText.innerText = this.configuration.accessText;\r\n\r\n        const modalInnerButton = document.createElement(\"button\");\r\n        modalInnerButton.innerText = this.configuration.accessButtonLabel;\r\n        this.requestSerialAccessOnClick(modalInnerButton);\r\n\r\n        modalInner.append(modalInnerText, modalInnerButton);\r\n        modalContainer.append(modalInner);\r\n        this.modal.append(modalOverlay, modalContainer);\r\n\r\n        document.body.append(this.modal);\r\n        return this.modal;\r\n    }\r\n\r\n    removeModal() {\r\n        this.modal.remove();\r\n    }\r\n\r\n    async connect() {\r\n        this.port = await navigator.serial.requestPort({ filters: this.configuration.filters });\r\n        console.log(this.port.getInfo());\r\n        await this.port.open({\r\n            baudRate: this.configuration.baudRate\r\n        })\r\n        if (this.configuration.requestAccessOnPageLoad) {\r\n            this.removeModal();\r\n        }\r\n        const textEncoder = new TextEncoderStream();\r\n        const writableStreamClosed = textEncoder.readable.pipeTo(this.port.writable);\r\n        this.writer = textEncoder.writable.getWriter();\r\n        let decoder = new TextDecoderStream();\r\n        const readableStreamClosed = this.port.readable.pipeTo(decoder.writable)\r\n        const inputStream = decoder.readable;\r\n        const reader = decoder.readable\r\n            .pipeThrough(new TransformStream(this.configuration.transformer))\r\n            .getReader()\r\n        await this.readLoop(reader);\r\n    }\r\n\r\n    on(name, callback) {\r\n        if (!this._listeners[name]) {\r\n            this._listeners[name] = [];\r\n        }\r\n        this._listeners[name].push(callback);\r\n        return [name, callback];\r\n    }\r\n\r\n    removeListener(name, callbackToRemove) {\r\n        if (typeof name == \"object\" && typeof callbackToRemove == \"undefined\") {\r\n            callbackToRemove = name[1]\r\n            name = name[0];\r\n        }\r\n\r\n        if (!this._listeners[name]) {\r\n            throw new Error('There is no listener named ' + name + '.')\r\n        }\r\n\r\n        let length = this._listeners[name].length\r\n\r\n        this._listeners[name] = this._listeners[name].filter((listener) => listener !== callbackToRemove);\r\n        return length !== this._listeners[name].length;\r\n    }\r\n\r\n    // Remove all listeners of event name\r\n    removeListeners(name) {\r\n        if (typeof name !== \"string\") {\r\n            throw new Error(\"removeListeners expects a string as parameter, which will be used to remove all listeners of that event.\");\r\n        }\r\n        const length = this._listeners[name].length\r\n        this._listeners[name] = [];\r\n        return length > 0;\r\n    }\r\n\r\n    async send(name, data) {\r\n        // If only 1 parameter is supplied, it's raw data.\r\n        if (typeof data === \"undefined\") {\r\n            if (this.configuration.logOutgoingSerialData) {\r\n                console.log(name);\r\n            }\r\n\r\n            if (this.configuration.parseStringsAsNumbers) {\r\n                name = parseAsNumber(name);\r\n            }\r\n\r\n            return this.sendData(name);\r\n        }\r\n\r\n        // If data is an object, parse its keys as ints\r\n        if (this.configuration.parseStringsAsNumbers) {\r\n            data = parseAsNumber(data);\r\n        }\r\n\r\n        const event = [name, data]\r\n        const stringified = JSON.stringify(event);\r\n        if (this.configuration.logOutgoingSerialData) {\r\n            console.log(stringified);\r\n        }\r\n        return this.writer.write(stringified + NEW_LINE);\r\n    }\r\n\r\n    async sendEvent(name) {\r\n        return this.send(\"_e\", name);\r\n    }\r\n\r\n    async sendData(data) {\r\n        return this.send(\"_d\", data);\r\n    }\r\n\r\n    emit(name, data) {\r\n        if (this.configuration.warnAboutUnregisteredEvents && !this._listeners[name]) {\r\n            return console.warn('Event ' + name + ' has been received, but it has never been registered as listener.');\r\n        }\r\n        this._listeners[name].forEach(callback => callback(data))\r\n    }\r\n\r\n    async readLoop(reader) {\r\n        while (true) {\r\n            const {value, done} = await reader.read();\r\n            if (value) {\r\n                // Use vanilla for as it's faster than forEach\r\n                // TODO check and validate value as valid JSON\r\n                let json = null;\r\n                try {\r\n                    json = JSON.parse(value)\r\n                } catch (e) {\r\n                    // console.error(e);\r\n                }\r\n                if (json) {\r\n                    if (this.configuration.logIncomingSerialData) {\r\n                        console.log(json);\r\n                    }\r\n                    // If it's an array, handle accordingly\r\n                    if (typeof json == \"object\") {\r\n                        if (json[0] === \"_w\") {\r\n                            console.warn(\"[ARDUINO] \" + json[1]);\r\n                            continue;\r\n                        }\r\n\r\n                        if (json[0] === \"_l\") {\r\n                            console.log(\"[ARDUINO] \" + json[1]);\r\n                            continue;\r\n                        }\r\n\r\n                        if (json[0] === \"_e\") {\r\n                            console.error(\"[ARDUINO] \" + json[1]);\r\n                            continue;\r\n                        }\r\n\r\n                        // Reserved event name 'd': Data transfer. Register a listener \"data\" to listen to it.\r\n                        if (json[0] === \"_d\") {\r\n                            this.emit('data', json[1]);\r\n                            continue;\r\n                        }\r\n\r\n                        this.emit(json[0], json[1]);\r\n                    }\r\n\r\n                    // If it's just a string, just call the event\r\n                    else if (typeof json == \"string\") {\r\n                        this.\r\n                        emit(json, null)\r\n                    }\r\n\r\n                } else {\r\n                    if (this.configuration.logIncomingSerialData) {\r\n                        console.log(value);\r\n                    }\r\n                }\r\n            }\r\n            if (done) {\r\n                console.log('[readLoop] DONE', done);\r\n                reader.releaseLock();\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"names":["chunks","chunk","controller","lines","this","split","pop","forEach","line","enqueue"],"mappings":"iQAmDiB,uIA3CJA,OAAS,mDAGlB,SAAUC,EAAOC,QAERF,QAAUC,MAETE,EAAQC,KAAKJ,OAAOK,MAAM,aAC3BL,OAASG,EAAMG,MACpBH,EAAMI,SAAQ,SAACC,UAASN,EAAWO,QAAQD,2BAG/C,SAAMN,GAEFA,EAAWO,QAAQL,KAAKJ"}